{
  "metadata": {
    "totalProblems": 450,
    "studyPlan": "DSA in 2.5 Months",
    "difficulty": {
      "easy": "5-10 mins",
      "medium": "15-20 mins", 
      "hard": "40-60 mins"
    },
    "categories": [
      "Arrays", "Strings", "2D Arrays", "Searching & Sorting", "Backtracking",
      "Linked List", "Stacks & Queues", "Greedy", "Binary Trees", "Binary Search Trees",
      "Heaps & Hashing", "Graphs", "Tries", "Dynamic Programming", "Bit Manipulation",
      "Segment Trees", "Matrix"
    ]
  },
  "companies": {
    "FAANG": ["Google", "Amazon", "Facebook", "Apple", "Netflix"],
    "top_tech": ["Microsoft", "Adobe", "Uber", "Goldman Sachs", "Samsung"],
    "indian_companies": ["Flipkart", "Paytm", "Ola", "Swiggy", "Zomato", "MakeMyTrip"],
    "all_companies": [
      "Amazon", "Microsoft", "Google", "Facebook", "Apple", "Adobe", "Goldman Sachs",
      "Uber", "Samsung", "Flipkart", "Paytm", "Oracle", "IBM", "Cisco", "VMWare",
      "Walmart", "Morgan Stanley", "D-E-Shaw", "Intuit", "Salesforce", "Netflix",
      "Ola", "Swiggy", "MakeMyTriip", "Hike", "Snapdeal", "Zoho", "Accolite",
      "FactSet", "Qualcomm", "MAQ Software", "OYO Rooms", "Visa", "PayPal",
      "LinkedIn", "Yahoo", "eBay", "Barclays", "JP Morgan", "Deutsche Bank"
    ]
  },
  "problems": [
    {
      "id": 1,
      "title": "Reverse the Array",
      "category": "Arrays",
      "difficulty": "Easy",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(1)",
      "companies": ["Infosys", "Moonfrog Labs"],
      "status": "Done",
      "approach": "Using two pointer & swapping & inbuilt",
      "leetcodeUrl": "https://leetcode.com/problems/reverse-string/",
      "description": "Reverse an array in place using two pointers",
      "tags": ["Array", "Two Pointers"],
      "estimatedTime": "5-10 mins",
      "isPopular": true
    },
    {
      "id": 2,
      "title": "Maximum and Minimum Element in an Array",
      "category": "Arrays", 
      "difficulty": "Easy",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(1)",
      "companies": ["ABCO", "Accolite", "Amazon", "Cisco", "Hike", "Microsoft", "Snapdeal", "VMWare", "Google", "Adobe"],
      "status": "Done",
      "approach": "Using maxi/mini & Sorting & linear search",
      "leetcodeUrl": "https://leetcode.com/problems/maximum-subarray/",
      "description": "Find maximum and minimum elements in an array",
      "tags": ["Array", "Linear Search"],
      "estimatedTime": "5-10 mins",
      "isPopular": true
    },
    {
      "id": 3,
      "title": "Maximum Subarray (Kadane's Algorithm)",
      "category": "Arrays",
      "difficulty": "Medium", 
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(1)",
      "companies": ["Microsoft", "Facebook"],
      "status": "Done",
      "approach": "Using Kadane's Algorithm",
      "leetcodeUrl": "https://leetcode.com/problems/maximum-subarray/",
      "description": "Find the contiguous subarray with the largest sum",
      "tags": ["Array", "Dynamic Programming", "Kadane's Algorithm"],
      "estimatedTime": "15-20 mins",
      "isPopular": true,
      "remarks": "use Kadane's Algorithm"
    },
    {
      "id": 4,
      "title": "Contains Duplicate",
      "category": "Arrays",
      "difficulty": "Easy",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(n)",
      "companies": ["Amazon"],
      "status": "Done", 
      "approach": "Using Unordered_map(count>=1)",
      "leetcodeUrl": "https://leetcode.com/problems/contains-duplicate/",
      "description": "Check if any value appears at least twice in the array",
      "tags": ["Array", "Hash Table"],
      "estimatedTime": "5-10 mins",
      "isPopular": true
    },
    {
      "id": 5,
      "title": "Chocolate Distribution Problem",
      "category": "Arrays",
      "difficulty": "Medium",
      "timeComplexity": "O(n log n)",
      "spaceComplexity": "O(1)",
      "companies": ["Amazon"],
      "status": "Done",
      "approach": "Using Sliding window & generate all subset",
      "leetcodeUrl": "https://leetcode.com/problems/fair-distribution-of-cookies/",
      "description": "Distribute chocolates among children such that difference is minimized",
      "tags": ["Array", "Sliding Window", "Sorting"],
      "estimatedTime": "15-20 mins",
      "isPopular": true
    },
    {
      "id": 6,
      "title": "Search in Rotated Sorted Array",
      "category": "Arrays", 
      "difficulty": "Medium",
      "timeComplexity": "O(log n)",
      "spaceComplexity": "O(1)",
      "companies": ["Microsoft", "Google", "Adobe", "Amazon", "D-E-Shaw", "Flipkart", "Hike", "Intuit", "MakeMyTrip", "Paytm"],
      "status": "Done",
      "approach": "Using Binary Search",
      "leetcodeUrl": "https://leetcode.com/problems/search-in-rotated-sorted-array/",
      "description": "Search for a target value in a rotated sorted array",
      "tags": ["Array", "Binary Search"],
      "estimatedTime": "15-20 mins",
      "isPopular": true
    },
    {
      "id": 7,
      "title": "Next Permutation",
      "category": "Arrays",
      "difficulty": "Medium",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(1)",
      "companies": ["Uber", "Goldman Sachs", "Adobe"],
      "status": "Done",
      "approach": "Find crisp point(nums[k] < nums[k+1]) then again traverse upto k from backward....",
      "leetcodeUrl": "https://leetcode.com/problems/next-permutation/",
      "description": "Find the next lexicographically greater permutation",
      "tags": ["Array", "Two Pointers"],
      "estimatedTime": "15-20 mins",
      "isPopular": true
    },
    {
      "id": 8,
      "title": "Best Time to Buy and Sell Stock",
      "category": "Arrays",
      "difficulty": "Easy",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(1)",
      "companies": ["Amazon", "D-E-Shaw", "Directi", "Flipkart", "Goldman Sachs", "Intuit", "MakeMyTrip", "Microsoft", "Ola Cabs", "Oracle", "Paytm", "Pubmatic", "Quikr", "Salesforce", "Sapient", "Swiggy", "Walmart", "Media.net", "Google"],
      "status": "Done",
      "approach": "Using DP",
      "leetcodeUrl": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock/",
      "description": "Find maximum profit from buying and selling stock once",
      "tags": ["Array", "Dynamic Programming"],
      "estimatedTime": "15-20 mins",
      "isPopular": true
    },
    {
      "id": 9,
      "title": "Kth Largest Element in an Array",
      "category": "Arrays",
      "difficulty": "Medium",
      "timeComplexity": "O(n log k)",
      "spaceComplexity": "O(k)",
      "companies": ["Amazon", "Microsoft", "Walmart", "Adobe"],
      "status": "Done",
      "approach": "Using priority_queue(minHeap) push until size < k if greater pop in it return top of it",
      "leetcodeUrl": "https://leetcode.com/problems/kth-largest-element-in-an-array/",
      "description": "Find the kth largest element in an unsorted array",
      "tags": ["Array", "Heap", "Quick Select"],
      "estimatedTime": "15-20 mins",
      "isPopular": true
    },
    {
      "id": 10,
      "title": "Trapping Rain Water",
      "category": "Arrays",
      "difficulty": "Hard",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(n)",
      "companies": ["Samsung"],
      "status": "Done",
      "approach": "use auxiliary arrays",
      "leetcodeUrl": "https://leetcode.com/problems/trapping-rain-water/",
      "description": "Calculate how much rainwater can be trapped",
      "tags": ["Array", "Two Pointers", "Dynamic Programming"],
      "estimatedTime": "40-60 mins",
      "isPopular": true,
      "remarks": "use auxiliary arrays"
    },
    {
      "id": 11,
      "title": "Product of Array Except Self",
      "category": "Arrays",
      "difficulty": "Medium",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(1)",
      "companies": ["Microsoft", "Facebook"],
      "status": "Done",
      "approach": "Using prefix(forward traverse) and suffix(backword traverse) in ans vector",
      "leetcodeUrl": "https://leetcode.com/problems/product-of-array-except-self/",
      "description": "Return array where each element is product of all other elements",
      "tags": ["Array", "Prefix Sum"],
      "estimatedTime": "15-20 mins",
      "isPopular": true
    },
    {
      "id": 12,
      "title": "3Sum",
      "category": "Arrays",
      "difficulty": "Medium",
      "timeComplexity": "O(nÂ²)",
      "spaceComplexity": "O(1)",
      "companies": ["Adobe", "Amazon", "Microsoft", "Morgan Stanley", "Samsung", "Snapdeal", "Times Internet"],
      "status": "Done",
      "approach": "Sort it, then remove duplicate and then play",
      "leetcodeUrl": "https://leetcode.com/problems/3sum/",
      "description": "Find all unique triplets that sum to zero",
      "tags": ["Array", "Two Pointers", "Sorting"],
      "estimatedTime": "15-20 mins",
      "isPopular": true
    },
    {
      "id": 13,
      "title": "Container With Most Water",
      "category": "Arrays",
      "difficulty": "Medium",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(1)",
      "companies": ["Flipkart", "Dunzo"],
      "status": "Done",
      "approach": "use 2 pointer approach",
      "leetcodeUrl": "https://leetcode.com/problems/container-with-most-water/",
      "description": "Find two lines that together with x-axis form container with most water",
      "tags": ["Array", "Two Pointers"],
      "estimatedTime": "15-20 mins",
      "isPopular": true,
      "remarks": "use 2 pointer approach"
    },
    {
      "id": 14,
      "title": "Valid Palindrome",
      "category": "Strings",
      "difficulty": "Easy",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(1)",
      "companies": ["Amazon", "Cisco", "D-E-Shaw", "Facebook", "FactSet", "Morgan Stanley", "Paytm", "Zoho"],
      "status": "Done",
      "approach": "Two-pointer approach: skip non-alphanumeric characters, compare lowercase letters from both ends.",
      "leetcodeUrl": "https://leetcode.com/problems/valid-palindrome/",
      "description": "Check if a string is a valid palindrome",
      "tags": ["String", "Two Pointers"],
      "estimatedTime": "5-10 mins",
      "isPopular": true
    },
    {
      "id": 15,
      "title": "Valid Anagram",
      "category": "Strings",
      "difficulty": "Easy",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(1)",
      "companies": ["Nagarro", "Media.net", "Directi", "Google", "Adobe", "Flipkart"],
      "status": "Done",
      "approach": "Count character frequencies; decrement for second string; mismatch/negative count means not anagram",
      "leetcodeUrl": "https://leetcode.com/problems/valid-anagram/",
      "description": "Check if two strings are anagrams",
      "tags": ["String", "Hash Table", "Sorting"],
      "estimatedTime": "5-10 mins",
      "isPopular": true
    },
    {
      "id": 16,
      "title": "Valid Parentheses",
      "category": "Strings",
      "difficulty": "Easy",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(n)",
      "companies": ["Google"],
      "status": "Done",
      "approach": "Use stack to match opening and closing brackets; return false on mismatch or imbalance.",
      "leetcodeUrl": "https://leetcode.com/problems/valid-parentheses/",
      "description": "Check if parentheses are valid and properly closed",
      "tags": ["String", "Stack"],
      "estimatedTime": "5-10 mins",
      "isPopular": true,
      "remarks": "use Stacks (if possible)"
    },
    {
      "id": 17,
      "title": "Minimum Window Substring",
      "category": "Strings",
      "difficulty": "Hard",
      "timeComplexity": "O(|s| + |t|)",
      "spaceComplexity": "O(|s| + |t|)",
      "companies": ["Amazon", "Google", "MakeMyTrip", "Streamoid Technologies", "Microsoft", "Media.net", "Atlassian", "Flipkart"],
      "status": "Done",
      "approach": "Using Sliding Window & two pointer approach",
      "leetcodeUrl": "https://leetcode.com/problems/minimum-window-substring/",
      "description": "Find minimum window in string S that contains all characters from string T",
      "tags": ["String", "Sliding Window", "Hash Table"],
      "estimatedTime": "40-60 mins",
      "isPopular": true
    },
    {
      "id": 18,
      "title": "Reverse Linked List",
      "category": "Linked List",
      "difficulty": "Easy",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(1)",
      "companies": ["Sprinklr"],
      "status": "Done",
      "approach": "By changing links",
      "leetcodeUrl": "https://leetcode.com/problems/reverse-linked-list/",
      "description": "Reverse a singly linked list",
      "tags": ["Linked List", "Recursion"],
      "estimatedTime": "5-10 mins",
      "isPopular": true
    },
    {
      "id": 19,
      "title": "Linked List Cycle",
      "category": "Linked List",
      "difficulty": "Easy",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(1)",
      "companies": ["Accolite", "Amazon", "D-E-Shaw", "Hike", "Lybrate", "Mahindra Comviva", "MakeMyTrip", "MAQ Software", "OYO Rooms", "Paytm", "Qualcomm", "Samsung", "SAP Labs", "Snapdeal", "Veritas", "VMWare", "Walmart", "Adobe"],
      "status": "Done",
      "approach": "By Tortoise & Hare",
      "leetcodeUrl": "https://leetcode.com/problems/linked-list-cycle/",
      "description": "Detect if linked list has a cycle",
      "tags": ["Linked List", "Two Pointers"],
      "estimatedTime": "5-10 mins",
      "isPopular": true
    },
    {
      "id": 20,
      "title": "Merge Two Sorted Lists",
      "category": "Linked List", 
      "difficulty": "Easy",
      "timeComplexity": "O(n + m)",
      "spaceComplexity": "O(1)",
      "companies": ["Accolite", "Amazon", "Belzabar", "Brocade", "FactSet", "Flipkart", "MakeMyTrip", "Microsoft", "OATS Systems", "Oracle", "Samsung", "Synopsys", "Zoho"],
      "status": "Done",
      "approach": "Think about two pointer",
      "leetcodeUrl": "https://leetcode.com/problems/merge-two-sorted-lists/",
      "description": "Merge two sorted linked lists",
      "tags": ["Linked List", "Recursion"],
      "estimatedTime": "5-10 mins",
      "isPopular": true
    },
    {
      "id": 21,
      "title": "Maximum Depth of Binary Tree",
      "category": "Binary Trees",
      "difficulty": "Easy",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(h)",
      "companies": ["Amazon", "Cadence India", "CouponDunia", "D-E-Shaw", "FactSet", "FreeCharge", "MakeMyTrip"],
      "status": "Done",
      "approach": "Recursive DFS: Return 1 plus max depth of left and right subtrees.",
      "leetcodeUrl": "https://leetcode.com/problems/maximum-depth-of-binary-tree/",
      "description": "Find the maximum depth of a binary tree",
      "tags": ["Tree", "DFS", "BFS", "Binary Tree"],
      "estimatedTime": "5-10 mins",
      "isPopular": true
    },
    {
      "id": 22,
      "title": "Invert Binary Tree",
      "category": "Binary Trees",
      "difficulty": "Easy",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(h)",
      "companies": ["Amazon", "Hike"],
      "status": "Done",
      "approach": "Recursively DFS: swap each node's left and right children, return root mirror.",
      "leetcodeUrl": "https://leetcode.com/problems/invert-binary-tree/",
      "description": "Invert/mirror a binary tree",
      "tags": ["Tree", "DFS", "BFS", "Binary Tree"],
      "estimatedTime": "5-10 mins",
      "isPopular": true
    },
    {
      "id": 23,
      "title": "Valid Binary Search Tree",
      "category": "Binary Search Trees",
      "difficulty": "Medium",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(h)",
      "companies": ["OYO Rooms", "Qualcomm", "Samsung", "Snapdeal", "VMWare", "Walmart", "Wooker", "Amazon", "Facebook"],
      "status": "Done",
      "approach": "DFS with min/max limits: ensure each node's value stays within valid range recursively.",
      "leetcodeUrl": "https://leetcode.com/problems/validate-binary-search-tree/",
      "description": "Validate if a binary tree is a valid BST",
      "tags": ["Tree", "DFS", "BST"],
      "estimatedTime": "15-20 mins",
      "isPopular": true
    },
    {
      "id": 24,
      "title": "Implement Two Stacks in an Array",
      "category": "Stacks & Queues",
      "difficulty": "Easy",
      "timeComplexity": "O(1)",
      "spaceComplexity": "O(n)",
      "companies": ["24*7 Innovation Labs", "Microsoft", "Samsung", "Snapdeal"],
      "status": "Done",
      "approach": "Use two stacks growing from opposite ends; check space between tops to avoid overflow.",
      "leetcodeUrl": "https://leetcode.com/problems/implement-stack-using-queues/",
      "description": "Implement two stacks using single array",
      "tags": ["Stack", "Array", "Design"],
      "estimatedTime": "15-20 mins",
      "isPopular": true
    },
    {
      "id": 25,
      "title": "Evaluation of Postfix Expression",
      "category": "Stacks & Queues", 
      "difficulty": "Medium",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(n)",
      "companies": ["Amazon", "Google", "Facebook"],
      "status": "Done",
      "approach": "Use a stack to store operands; evaluate on operator and push result back.",
      "leetcodeUrl": "https://leetcode.com/problems/evaluate-reverse-polish-notation/",
      "description": "Evaluate postfix expression using stack",
      "tags": ["Stack", "Array", "Math"],
      "estimatedTime": "15-20 mins",
      "isPopular": true
    },
    {
      "id": 26,
      "title": "Top K Frequent Elements",
      "category": "Heaps & Hashing",
      "difficulty": "Medium",
      "timeComplexity": "O(n log k)",
      "spaceComplexity": "O(n + k)",
      "companies": ["Amazon", "Microsoft"],
      "status": "Done",
      "approach": "Use hash - storing frequency,than apply minHeap -remove smallest element when > k",
      "leetcodeUrl": "https://leetcode.com/problems/top-k-frequent-elements/",
      "description": "Find k most frequent elements in array",
      "tags": ["Array", "Hash Table", "Divide and Conquer", "Sorting", "Heap", "Bucket Sort", "Quick Select"],
      "estimatedTime": "15-20 mins",
      "isPopular": true
    },
    {
      "id": 27,
      "title": "Heap Sort",
      "category": "Heaps & Hashing",
      "difficulty": "Medium",
      "timeComplexity": "O(n log n)",
      "spaceComplexity": "O(1)",
      "companies": ["Adobe"],
      "status": "Done",
      "approach": "Max heap using heapify, backword traversing(1stly for no lead then for all)",
      "leetcodeUrl": "https://leetcode.com/problems/sort-an-array/",
      "description": "Sort array using heap sort algorithm",
      "tags": ["Array", "Divide and Conquer", "Heap", "Sorting"],
      "estimatedTime": "15-20 mins",
      "isPopular": true
    },
    {
      "id": 28,
      "title": "Coin Change",
      "category": "Dynamic Programming",
      "difficulty": "Medium",
      "timeComplexity": "O(n * amount)",
      "spaceComplexity": "O(amount)",
      "companies": ["Microsoft", "Samsung", "Barclays", "Apple", "Adobe"],
      "status": "Pending",
      "approach": "Dynamic Programming - Bottom Up",
      "leetcodeUrl": "https://leetcode.com/problems/coin-change/",
      "description": "Find minimum coins needed to make amount",
      "tags": ["Array", "Dynamic Programming", "BFS"],
      "estimatedTime": "15-20 mins",
      "isPopular": true
    },
    {
      "id": 29,
      "title": "Climbing Stairs",
      "category": "Dynamic Programming", 
      "difficulty": "Easy",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(1)",
      "companies": ["Intuit"],
      "status": "Pending",
      "approach": "Dynamic Programming - Fibonacci sequence",
      "leetcodeUrl": "https://leetcode.com/problems/climbing-stairs/",
      "description": "Count distinct ways to reach top of staircase",
      "tags": ["Math", "Dynamic Programming", "Memoization"],
      "estimatedTime": "5-10 mins",
      "isPopular": true
    },
    {
      "id": 30,
      "title": "Word Break",
      "category": "Dynamic Programming",
      "difficulty": "Medium", 
      "timeComplexity": "O(n * m * k)",
      "spaceComplexity": "O(n)",
      "companies": ["Amazon", "Google", "Microsoft", "Walmart", "Apple", "IBM"],
      "status": "Pending",
      "approach": "Dynamic Programming with dictionary lookup",
      "leetcodeUrl": "https://leetcode.com/problems/word-break/",
      "description": "Check if string can be segmented using dictionary words",
      "tags": ["Array", "Hash Table", "String", "Dynamic Programming", "Trie", "Memoization"],
      "estimatedTime": "15-20 mins",
      "isPopular": true
    }
  ],
  "companyProblems": {
    "Amazon": [1, 2, 3, 4, 5, 6, 8, 9, 12, 14, 17, 19, 20, 21, 23, 25, 26, 30],
    "Microsoft": [2, 3, 6, 8, 11, 12, 17, 20, 24, 26, 28, 30],
    "Google": [2, 8, 15, 16, 17, 25, 30],
    "Facebook": [3, 11, 14, 23, 25],
    "Apple": [28, 30],
    "Adobe": [2, 4, 7, 9, 12, 15, 27, 28],
    "Goldman Sachs": [7, 8],
    "Uber": [7],
    "Samsung": [10, 12, 19, 20, 23, 24, 28],
    "Flipkart": [6, 8, 13, 15, 17, 20],
    "Paytm": [6, 8, 14, 19]
  },
  "studyPlans": {
    "beginner_30_days": {
      "name": "30 Day Beginner Plan",
      "duration": "30 days",
      "problemsPerDay": 5,
      "focusAreas": ["Arrays", "Strings", "Linked List", "Binary Trees"],
      "problems": [1, 2, 4, 14, 15, 16, 18, 19, 20, 21, 22, 29]
    },
    "intermediate_60_days": {
      "name": "60 Day Intermediate Plan", 
      "duration": "60 days",
      "problemsPerDay": 7,
      "focusAreas": ["Arrays", "Strings", "DP", "Graphs", "Trees"],
      "problems": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 23, 24, 25, 26, 27, 28, 30]
    },
    "advanced_90_days": {
      "name": "90 Day Advanced Plan",
      "duration": "90 days", 
      "problemsPerDay": 5,
      "focusAreas": ["All Topics", "Company Specific"],
      "problems": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
    }
  },
  "filters": {
    "difficulty": ["Easy", "Medium", "Hard"],
    "status": ["Done", "Pending", "In Progress"],
    "timeRange": ["5-10 mins", "15-20 mins", "40-60 mins"],
    "companies": ["Amazon", "Microsoft", "Google", "Facebook", "Apple", "Adobe", "All"],
    "categories": ["Arrays", "Strings", "Linked List", "Binary Trees", "Dynamic Programming", "All"]
  },
  "stats": {
    "totalByDifficulty": {
      "easy": 8,
      "medium": 17, 
      "hard": 5
    },
    "totalByStatus": {
      "done": 27,
      "pending": 3,
      "inProgress": 0
    },
    "totalByCategory": {
      "Arrays": 13,
      "Strings": 4,
      "LinkedList": 3,
      "BinaryTrees": 2,
      "BinarySearchTrees": 1,
      "StacksQueues": 2,
      "HeapsHashing": 3,
      "DynamicProgramming": 3
    },
    "averageTimePerProblem": "18 mins",
    "recommendedDailyTarget": 5
  }
}
